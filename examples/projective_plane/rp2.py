# Script for constructing data on the projective plane.

import numpy as np
import scipy as sp
import matplotlib.pyplot as plt
from ripser import ripser
from persim import plot_diagrams
import real_projective
import cplx_projective
from examples import pipeline   # Note: to make this work, install
            # package in editable mode, `pip install -e .` in root directory.
from scipy.spatial.distance import pdist    # For some reason I have to
                                            # import this, instead of just
                                            # running it?
from numpy.random import default_rng
from ppca import ppca

# Uniformly sample points from the sphere.
rng = default_rng(57)
N = 1000     # Number of points to sample.
n_landmarks = 100
RP = rng.standard_normal((3,N))
RP = RP/np.linalg.norm(RP, axis=0)
RP[:,2] = np.abs(RP[:,2])   # Set all z-coordinates to positive.
D = real_projective.projective_distance_matrix(RP.T)

# Plot the data. This is a projection onto the first two coordinates.
# TODO:Make a nice plot of this. Should be properly square, and color-coded to
# show distance from origin for comparison with final result.
#plt.scatter(RP[0,:], RP[1,:])
#plt.show()

# Compute persistence.
idx = pipeline.maxmin_subsample_distance_matrix(D, n_landmarks)['indices']
D_sub = D[idx,:][:,idx]
RP_sub = RP[:,idx]
PH_sub = ripser(D_sub, coeff=2, do_cocycles=True, distance_matrix=True)
#plot_diagrams(PH_sub['dgms'])
#plt.show()

# Something weird is going on with ripser producing cocycles here. I saved the
# distance matrix and did this computation in ripser manually. This loads that
# output instead of recomputing it. (The issue may have something to do with the
# length of this cocyle...)
# np.savetxt('RP2_distance_matrix.csv', D_sub, delimiter=',')
#diagram = np.loadtxt('rp2_diagram.txt', skiprows=1, delimiter=',')
#cocycles = np.loadtxt('rp2_diagram.txt', skiprows=1, delimiter=',')
#cocycles = PH_sub['cocycles'][1]
#diagram = PH_sub['dgms'][1]
#eta, birth, death = pipeline.prominent_cocycle(cocycles, diagram,
#    threshold_at_death=False)
eta = np.array([[19,61], [10,64], [3,53], [38,63], [31,51], [6,51], [12,84], [4,57],
    [42,57], [12,38], [3,96], [19,59], [19,34], [7,34], [6,58], [6,39], [30,50],
    [4,38], [33,34], [13,39], [19,28], [3,89], [34,89], [48,89], [3,33],
    [39,47], [3,30], [12,31], [10,30], [7,26], [39,64], [19,48], [34,95],
    [51,84], [26,42], [38,78], [51,67], [61,89], [63,84], [19,91], [30,69],
    [50,64], [8,19], [50,96], [10,99], [69,89], [3,95], [59,89], [20,38],
    [57,73], [3,99], [51,94], [64,74], [3,17], [7,91], [7,57], [10,13], [69,96],
    [38,46], [38,82], [82,84], [33,48], [4,18], [39,77], [47,58], [31,82],
    [26,66], [50,99], [33,61], [4,84], [53,69], [12,18], [38,51], [10,43],
    [1,19], [3,19], [57,66], [4,26], [39,67], [12,94], [58,67], [31,58],
    [10,96], [3,37], [19,90], [39,43], [30,74], [57,78], [8,89], [6,24],
    [26,95], [28,89], [19,25], [7,61], [89,91], [22,51], [58,64], [6,12],
    [33,69], [34,66], [7,68], [50,53], [6,82], [47,51], [86,89], [19,92],
    [30,39], [33,91], [13,58], [3,64], [19,85], [31,63], [34,37], [38,42],
    [19,86], [19,69], [39,99], [21,30], [18,42], [46,84], [48,53], [15,57],
    [18,51], [40,57], [26,33], [18,63], [42,68], [91,95], [39,72], [6,10],
    [61,95], [38,40], [6,74], [34,53], [69,99], [57,63], [64,69], [38,73],
    [34,42], [78,84], [24,31], [26,73], [32,39], [10,47], [12,67], [30,48],
    [48,96], [19,93], [19,26], [17,50], [3,7], [58,84], [30,45], [21,89],
    [19,68], [4,68], [50,89], [43,50], [3,43], [26,37], [20,84], [33,59],
    [12,57], [10,17], [24,84], [24,64], [45,64], [51,54], [13,74], [74,99],
    [26,89], [42,91], [31,39], [1,7], [15,26], [31,46], [48,95], [57,95],
    [1,89], [57,87], [10,72], [38,55], [17,69], [18,78], [21,96], [39,44],
    [38,52], [24,38], [28,33], [33,50], [12,22], [69,95], [58,77], [44,51],
    [66,91], [82,94], [7,18], [20,57], [21,64], [12,54], [30,58], [10,53],
    [42,84], [63,94], [58,94], [4,31], [16,19], [85,89], [19,21], [74,96],
    [67,82], [19,56], [18,82], [22,58], [68,95], [33,86], [11,39], [30,86],
    [66,68], [8,33], [89,93], [37,57], [25,89], [43,74], [47,74], [4,94],
    [39,96], [33,68], [89,90], [24,67], [21,53], [3,66], [1,33], [18,73],
    [24,47], [13,51], [68,89], [22,39], [39,88], [10,77], [19,97], [13,50],
    [10,88], [38,58], [89,97], [24,30], [43,58], [3,88], [21,33], [19,71],
    [44,58], [21,99], [19,35], [58,99], [26,78], [13,24], [19,54], [89,92],
    [51,77], [53,86], [38,87], [37,69], [37,91], [0,38], [86,96], [12,68],
    [61,66], [4,54], [43,69], [33,57], [7,54], [18,20], [17,39], [30,81],
    [19,50], [18,46], [1,95], [26,40], [51,64], [15,34], [7,28], [51,56],
    [53,61], [18,66], [48,99], [34,96], [38,83], [4,91], [73,84], [50,95],
    [37,61], [45,96], [31,74], [6,46], [39,70], [42,54], [7,48], [31,78],
    [19,29], [3,41], [45,99], [42,61], [30,97], [40,84], [10,32], [68,73],
    [39,94], [37,48], [6,45], [17,48], [20,31], [26,53], [6,63], [51,68],
    [15,38], [55,57], [24,94], [18,40], [47,82], [10,67], [51,57], [1,42],
    [22,82], [39,84], [2,39], [37,50], [67,74], [28,95], [26,87], [17,34],
    [12,47], [42,94], [4,34], [59,95], [48,64], [46,57], [33,90], [58,72],
    [38,66], [12,26], [52,84], [26,63], [34,73], [53,91], [50,88], [7,90],
    [7,38], [46,94], [18,58], [64,81], [64,82], [32,58], [50,72], [63,68],
    [57,82], [29,89], [3,72], [37,68], [54,63], [17,74], [9,38], [7,69], [8,53],
    [24,99], [53,74], [0,84], [74,84], [3,13], [53,59], [64,86], [7,59],
    [17,21], [68,78], [19,57], [15,18], [81,89], [41,57], [78,94], [57,89],
    [74,77], [72,74], [1,66], [15,68], [54,82], [58,96], [18,24], [55,84],
    [11,58], [54,58], [31,42], [13,45], [18,95], [22,24], [2,10], [9,57],
    [27,57], [63,67], [10,31], [73,91], [38,75], [1,4], [7,94], [39,80],
    [86,95], [35,89], [56,89], [33,97], [7,84], [86,99], [96,97], [11,51],
    [24,43], [5,19], [33,85], [8,30], [19,81], [33,93], [8,95], [12,56],
    [15,91], [38,74], [43,45], [54,89], [6,50], [45,53], [18,19], [25,33],
    [81,96], [22,63], [26,41], [12,44], [21,95], [13,82], [1,51], [21,43],
    [38,45], [39,53], [16,89], [8,96], [64,97], [10,33], [31,45], [7,56],
    [0,31], [45,89], [34,41], [53,97], [3,15], [10,89], [24,77], [0,30],
    [13,69], [24,96], [90,95], [33,54], [19,60], [10,37], [46,67], [20,94],
    [33,92], [69,88], [45,84], [47,50], [38,62], [18,87], [39,60], [30,34],
    [20,26], [54,95], [26,51], [53,57], [18,33], [0,64], [19,22], [2,3],
    [1,12], [30,82], [54,66], [40,68], [66,84], [0,6], [19,94], [74,88],
    [38,39], [30,51], [31,52], [45,47], [28,53], [52,57], [4,22], [81,99],
    [71,89], [17,26], [39,54], [1,37], [17,86], [10,41], [38,81], [56,58],
    [61,96], [32,51], [43,48], [48,66], [84,87], [18,55], [39,56], [66,69],
    [54,78], [58,88], [4,61], [17,45], [43,51], [15,84], [68,82], [34,99],
    [59,96], [10,95], [17,58], [83,84], [53,81], [51,90], [18,37], [3,42],
    [33,56], [73,94], [53,68], [19,79], [10,44], [10,11], [7,50], [14,38],
    [32,74], [24,44], [18,89], [39,49], [12,91], [74,94], [44,82], [97,99],
    [31,73], [69,72], [54,73], [41,50], [57,83], [29,30], [21,37], [12,13],
    [12,64], [7,8], [13,21], [18,39], [10,84], [39,41], [74,89], [26,96],
    [24,54], [19,45], [31,40], [18,52], [58,70], [33,81], [30,93], [26,27],
    [51,60], [27,38], [30,59], [51,91], [22,46], [51,99], [33,45], [20,68],
    [15,61], [10,70], [34,87], [22,74], [46,54], [19,75], [1,53], [6,81],
    [51,72], [37,86], [37,59], [68,87], [39,98], [45,67], [28,37], [77,82],
    [50,77], [2,50], [66,94], [10,80], [24,72], [46,64], [29,33], [42,90],
    [53,93], [7,31], [41,69], [91,96], [28,66]])

birth = 0.271736
death = 1.05386
print('Birth: %2.4f' %birth)
print('Death: %2.4f' %death)

# Get a partition of unity.
print('Computing partition of unity.')
part_func = pipeline.partition_unity(D, .25, idx, bump_type='quadratic')
print('Finding projective coordinates.')
proj_coords = pipeline.proj_coordinates(part_func, eta)
print('Computing distance matrix of projective coordinates.')
D_pc = real_projective.projective_distance_matrix(proj_coords.T)
print('Estimating geodesic distance matrix.')
D_geo = real_projective.geo_distance_matrix(D_pc, k=8)
# Compute PH of landmarks of high-dimensional data.
print('Computing persistence of projective coordinates.')
PH_pc = ripser(D_geo, distance_matrix=True, maxdim=2, coeff=2)
plot_diagrams(PH_pc['dgms'])
plt.show()
